akka {
  loglevel = INFO

  actor {
    provider = "akka.cluster.ClusterActorRefProvider"

    deployment {
        /MasterCrawlerActor/CrawlingRouter {
          router = balancing-pool
          nr-of-instances = 2
        }
      }
  }

  cluster {
    seed-nodes = [
      "akka.tcp://ClusterSystem@127.0.0.1:2551"]

    auto-down-unreachable-after = 30s
  }

  remote {
    log-remote-lifecycle-events = off
    netty.tcp {
      hostname = "127.0.0.1"
      port = 0
    }
  }
}


common {
  sparqlEndpoint = "http://localhost:9999/bigdata/namespace/needtest3/sparql"
}

crawler {

  http {
    timeout {
      connection = 2000
      read = 2000
    }
  }

  metaDataUpdate {
    maxBulkSize = 10
    maxDuration = 10000
    sparqlEndpoint = "http://localhost:9999/bigdata/namespace/needtest3/sparql"
  }

  propertyPaths {
    base = ["<http://www.w3.org/2000/01/rdf-schema#member>",
      "(<http://purl.org/webofneeds/model#hasConnections>/<http://www.w3.org/2000/01/rdf-schema#member>)/<http://purl.org/webofneeds/model#hasRemoteNeed>"]
    nonBase = ["<http://purl.org/webofneeds/model#hasConnections>",
      "<http://purl.org/webofneeds/model#hasConnections>/<http://www.w3.org/2000/01/rdf-schema#member>",
      "((<http://purl.org/webofneeds/model#hasConnections>/<http://www.w3.org/2000/01/rdf-schema#member>)/<http://purl.org/webofneeds/model#hasEventContainer>)/<http://www.w3.org/2000/01/rdf-schema#member>"]
  }
}

wonNodeController {
  sparqlEndpoint = "http://localhost:9999/bigdata/namespace/needtest3/sparql"

  wonNode {
    crawl = ["http://satsrv07.researchstudio.at:8888/won/resource"]
    skip = ["http://sat016.researchstudio.at:8080/won/resource"]

    lifeCheckDuration = 10000
  }
}

matcher {
  rescal {
    executionDir = "C:/dev/temp/rescal-matcher"
    nlpResourceDir = "won-matcher-rescal/src/main/resources"
    pythonScriptDir = "won-matcher-rescal/src/main/python"
    executionDuration = 3600000
    threshold = 0.1
    rank = 500
  }
}