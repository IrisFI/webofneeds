@import 'math';

@mixin _speech-bubble($background-color, $border-color, $triangle-height, $border-width, $hpos) {
  background-color: $background-color;
  position: relative; // to allow positioning the triangle-parts as absolute

  &:after {
    content: '';
    display: block; //rly needed?

    background: linear-gradient( -45deg, rgba(0,0,0,0.0) 50%, $background-color 50%);

    $sizeSq: stripUnit(2 * $triangle-height * $triangle-height);
    $size: sqrt($sizeSq) * extractUnit($triangle-height);

    height: $size;
    width: $size;

    border-color: $border-color;
    border-style: solid;

    position: absolute;

    /* top | right | bottom | left */
    border-width: $border-width 0 0 $border-width;
  }
}

/**
 * a hacky solution to the speech-bubble-triangle using :before and :after
 * based on:
 * * http://nicolasgallagher.com/pure-css-speech-bubbles/
 * * http://ilikepixels.co.uk/drop/bubbler/
 *
 * @param $triangleSize: needs to be an absolute value (that can be added to the 1px border-width)
 * @param $hpos: a %-value determining where on the top edge the triangle is placed.
 */
@mixin speech-bubble-top($background-color, $border-color, $triangle-height, $border-width: 1px, $hpos: 50%) {
  @include _speech-bubble($background-color, $border-color, $triangle-height, $border-width, $hpos);

  &:after {
    left: $hpos;
    transform: rotate(45deg);

    $sizeSq: stripUnit(2 * $triangle-height * $triangle-height);
    $size: sqrt($sizeSq) * extractUnit($triangle-height);

    /*
    it rotates first with it's left-upper corner starting at (0,0), thus rotating
    around ($size/2, $size/2) -> we need to shift it up by ($size/2) to make
    sure the center's at the upper edge of the container.
    */
    top: -$size/2;
  }
}

@mixin speech-bubble-bottom($background-color, $border-color, $triangle-height, $border-width: 1px, $hpos: 50%) {
  @include _speech-bubble($background-color, $border-color, $triangle-height, $border-width, $hpos);

  &:after {
    left: $hpos;
    transform: rotate(225deg);

    $sizeSq: stripUnit(2 * $triangle-height * $triangle-height);
    $size: sqrt($sizeSq) * extractUnit($triangle-height);

    /*
    it rotates first with it's left-upper corner starting at (0,0), thus rotating
    around ($size/2, $size/2) -> we need to shift it up by ($size/2) to make
    sure the center's at the upper edge of the container.
    */
    bottom: -$size/2;
  }
}
@mixin speech-bubble-left($background-color, $border-color, $triangle-height, $border-width: 1px, $hpos: 50%) {
  @include _speech-bubble($background-color, $border-color, $triangle-height, $border-width, $hpos);

  &:after {
    top: $hpos;
    transform: rotate(-45deg);

    $sizeSq: stripUnit(2 * $triangle-height * $triangle-height);
    $size: sqrt($sizeSq) * extractUnit($triangle-height);

    /*
    it rotates first with it's left-upper corner starting at (0,0), thus rotating
    around ($size/2, $size/2) -> we need to shift it up by ($size/2) to make
    sure the center's at the upper edge of the container.
    */
    left: -$size/2;
  }
}
@mixin speech-bubble-right($background-color, $border-color, $triangle-height, $border-width: 1px, $hpos: 50%) {
  @include _speech-bubble($background-color, $border-color, $triangle-height, $border-width, $hpos);

  &:after {
    top: $hpos;
    transform: rotate(135deg);

    $sizeSq: stripUnit(2 * $triangle-height * $triangle-height);
    $size: sqrt($sizeSq) * extractUnit($triangle-height);

    /*
    it rotates first with it's left-upper corner starting at (0,0), thus rotating
    around ($size/2, $size/2) -> we need to shift it up by ($size/2) to make
    sure the center's at the upper edge of the container.
    */
    right: -$size/2;
  }
}

