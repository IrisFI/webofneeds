//span the following over the whole scss to win specificity battles
//#body-id {


@import 'fonts';
@import 'flex-layout';
@import 'sizing-utils';
@import 'positioning-utils';

// <style-resetting> ---------------------------------------

body, header, section, nav, div, ul {
  padding: 0;
  margin: 0;
}

// </style-resetting> --------------------------------------



// colors

$won-red: #F04646;
$won-light-gray: #F0F2F4; //used for headings
$won-lighter-gray: #F8F9F9; //used for background
$won-line-gray: #CBD2D1; //use for lines



// fonts



//utils --- TODO: move these to seperate files

%list-nav-horizontal {
  list-style: none;
  margin: 0;
  padding: 0;
  & > li {
    display: inline-block;
  }
}

// global styling

/*
html {
  overflow-x: scroll;
  overflow-y: scroll;
}*/
html, body {
  //TODO make sure the body covers everything perfectly but doesn't cause external scrollbars.
  //min-height: 100vh; //doesn't ignore scrollbars in chrome
  //min-height: 100%;
  //min-width: 100vw; //doesn't ignore scrollbars in chrome
  //min-width: 100%;
  //@include fixed-square(99.9%); //dirty
  //@include fixed-height(100vh);

  //position: absolute; top: 01px; bottom: 01px; right: 01px; left: 01px;
}

//<wonAppTag> ----------------------------------------------

won-app {
  background-color: $won-lighter-gray;

  //display: block;
  //  height: 100%;
  @extend %fill;
  @extend %fixed-fill;
  //@extend %fixed-fullscreen; //works but is hacky imho

  @extend %flex-column;
  align-items: stretch; //TODO this is bad style! it overwrites flex-col's align-items
  & > .contentArea { flex-grow: 1; }
}

.topnav { //TODO split into single-purpose-classes

  @extend %flex-row-spaced;

  font-family: 'Open Sans';
  font-weight: 400;
  font-style: normal;

  //@include fixed-height(6rem); //TODO might be a bit too much

  background-color: white;

  & a {
    color: $won-red;
    text-decoration: none;
  }

  & .topnav__page-title {
    font-weight: 700;
  }

  & .topnav__carret {
    /*
    // without svg-included margins
    @include fixed-height(0.5rem);
    @include fixed-width(0.875rem);
    */

    // with svg-included margins
    @include fixed-square(1rem);
  }

  & .topnav__button {
    @extend %flex-row;

    & .bigicon {
      //TODO; generic classes shouldn't be styled in non-bem classes
      margin: 0.75rem;
    }
  }
  //TODO some of the images contain white-space within them (e.g. the help-, plus- and carret-icons)

  & .topnav__left { /* @extend %flex-row; */ }

  & .topnav__list { @extend %flex-row; }
}

.bigicon {
  //@include fixed-square(3.6rem);
  @include fixed-square(2.25rem);

}

%mainTabBar {
  //TODO this class doesn't adhere to the SRP yet, imho.
  background-color: $won-light-gray;
  border-top: 1px solid $won-line-gray;
  border-bottom: 1px solid $won-line-gray;
  @extend %flex-row-spaced;

  font-family: 'Open Sans';

  & .tabs {
    font-weight: 400;
    @extend %flex-row;
    align-items: stretch;

    $selectedBorderWidth: 0.25rem;
    & .selectedTab {
      border-bottom: $selectedBorderWidth solid $won-red;
    }

    & li {
      $verticalPadding: 1rem;
      $horizontalPadding: 3.0rem;

      /* TODO use max-width and flex-space-in-between instead? This
       * collapses the padding on smaller viewports automatically. But
       * then again, this would make an assumption about the number
       * of contained tabs, which is bad.
       */
      margin-left: $horizontalPadding;
      margin-right: $horizontalPadding;
      padding-bottom: $verticalPadding - $selectedBorderWidth;
      padding-top: $verticalPadding;

      & a {
        color: black;
        text-decoration: none;
      }
    }

    & .tabs__unread {
      color: $won-red;
    }
  }
}

.mainTabs {
  @extend %mainTabBar;

  & .mainTabs__right {
    //TODO position properly according to reference
    & a {
      display: block;
    }
    & .mainTabs__right__searchicon {
      @include fixed-height(1.7rem);
    }
  }
}

.createNeedTitle {
  @extend %mainTabBar;
  @extend %speech-bubble--top;
}


.speechbubbletest {
  @extend %speech-bubble--top;
  padding: 1rem;
}



//TODO change this into an @include macro
// parameters: color, borderColor, borderWidth? (requires sqrt), side
/**
 * a hacky solution to the speech-bubble-triangle using :before and :after
 * based on:
 * * http://nicolasgallagher.com/pure-css-speech-bubbles/
 * * http://ilikepixels.co.uk/drop/bubbler/
 */
%speech-bubble--top {
  background-color: $won-light-gray;
  border: 1px solid $won-line-gray;
  position: relative; // to allow positioning the triangle-parts as absolute

  $triangleSize: 16px;

  &:before, &:after {

    content: "";
    display: block;

    position: absolute; // might be problematic
    right: 50%;
    left: auto;
    bottom: auto;

    border-style: solid;
    //background-color: maroon;
    border-width: 0px $triangleSize $triangleSize;
  }
  &:before {
    // border
    border-color: $won-line-gray transparent;
    top: -$triangleSize;
  }
  &:after {
    // triangle content
    border-color: $won-light-gray transparent;
    //top: -$triangleSize + 1.8px;
    top: -$triangleSize + 1.44px; //sqrt(2 * borderwidth^2)

  }
}


//</wonAppTag> ----------------------------------------

