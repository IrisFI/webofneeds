<?xml version="1.0" encoding="UTF-8" ?>

<beans xmlns:sec="http://www.springframework.org/schema/security"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xmlns="http://www.springframework.org/schema/beans" xmlns:benas="http://www.springframework.org/schema/beans"
             xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
								 http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.2.xsd">


    <!-- all the beans necessary for node's functioning -->
    <import resource="classpath:/spring/node.xml"/>

    <!--
        Setup:
        There are two http sections for linked data below. One is for webaccesscontrol protected resources.
        They require a client certificate to be specified when the TLS request is made.
        The request is intercepted by the X509AuthenticationFilter, the resulting PreAutenticatedAuthenticationnToken
        Is processed by the PreAuthenticatedAuthenticationProvider, which is configured to use a
        WebIdUserDetailsService, which in turn de-references the WebId URI and checks if the client certificate used in
        the request is indeed using the public key specified in the data returned for the URI.

        TODO: continue here: If that is the case, the requested resource's acl is checked according to the principles
         of WebAccessControl.
    -->

    <!-- use all spring security's http headers except cache-control, which we handle separately to allow for fine
    grained cache control -->
    <!-- see http://docs.spring.io/spring-security/site/docs/3.2.9.RELEASE/reference/htmlsingle/#headers for
    configuration in spring-security-3.2.9 -->

    <!--
    we define two <http> sections: one for restricted access and one for public access. We could also do that with
    one more complex <http> section, but it seems that it would not really result in simplified configurations. For
    restricted access, we want to verify the WebID and we want no client-side caching. For public access, the WebID
    verification step is not needed, and we can be more open about caching.
     -->
    <sec:http request-matcher="regex"
              pattern="(/(resource|data|page)/event/.+|/(resource|data|page)/need/[a-zA-z0-9]+/deep.*|/(resource|data|page)/need/[a-zA-z0-9]+/events/.+|/(resource|data|page)/connection/[a-zA-z0-9]+/events/.+\\?deep=true|/resource\\?register=.+)"
              entry-point-ref="authorizationEntryPoint"
              authentication-manager-ref="authenticationManager"
              use-expressions="true"
              access-decision-manager-ref="accessDecisionManager">
        <sec:headers>
            <sec:cache-control/>
            <sec:content-type-options />
            <sec:hsts />
            <sec:frame-options />
            <sec:xss-protection />
        </sec:headers>
        <!-- we want to extract client certs from a header field if we're behind a reverse proxy, so we need a custom
         extension of the X.509 filter -->
        <sec:custom-filter ref="clientCertificateFilter" position="X509_FILTER" />
        <sec:intercept-url pattern = "/(resource|data|page)/event/.+" access="isFullyAuthenticated()" />
        <sec:intercept-url pattern = "/(resource|data|page)/need/[a-zA-z0-9]+/deep.*" access="isFullyAuthenticated()" />
        <sec:intercept-url pattern = "/(resource|data|page)/need/[a-zA-z0-9]+/events/.+" access="isFullyAuthenticated()" />
        <sec:intercept-url pattern = "/(resource|data|page)/connection/[a-zA-z0-9]+/events/.+\\?deep=true" access="isFullyAuthenticated()" />
        <sec:intercept-url pattern = "/resource\\?register=.+" access="isFullyAuthenticated()" />
        <sec:intercept-url pattern=".*" access="denyAll" />
    </sec:http>

    <bean id="webAuthenticationDetailsSource" class="org.springframework.security.web.authentication.WebAuthenticationDetailsSource" />
     <sec:http entry-point-ref="authorizationEntryPoint"
              authentication-manager-ref="authenticationManager">
        <sec:headers>
            <!-- no cache-control for public resources to allow for storing-->
            <sec:content-type-options />
            <sec:hsts />
            <sec:frame-options />
            <sec:xss-protection />
        </sec:headers>
    </sec:http>

    <bean id="clientCertificateFilter"
          class="won.cryptography.webid.springsecurity.ReverseProxyCompatibleX509AuthenticationFilter">
        <constructor-arg name="behindProxy" value="${client.authentication.behind.proxy}" />
        <property name="authenticationDetailsSource" ref="webAuthenticationDetailsSource" />
        <property name="authenticationManager" ref="authenticationManager" />
    </bean>

    <bean id="authorizationEntryPoint" class="org.springframework.security.web.authentication.Http403ForbiddenEntryPoint" />

    <bean id="webIdVerificationAgent" class="won.cryptography.webid.WebIDVerificationAgent">
        <property name="linkedDataSource" ref="linkedDataSource" />
    </bean>
    <bean id="acl" class="won.cryptography.webid.WonDefaultAccessControlRules"/>

    <bean id="webIdUserDetailsService" class="won.cryptography.webid.springsecurity.WebIdUserDetailsService" />

    <bean id="preAuthenticationProvider"
          class="org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider">
        <property name="preAuthenticatedUserDetailsService" ref="webIdUserDetailsService" />
    </bean>

    <sec:authentication-manager id="authenticationManager">
       <sec:authentication-provider ref="preAuthenticationProvider" />
    </sec:authentication-manager>

    <bean id="accessDecisionManager" class="org.springframework.security.access.vote.AffirmativeBased">
        <constructor-arg>
            <list>
                <bean class="won.cryptography.webid.springsecurity.DefaultWoNAccessDecisionVoter" />
            </list>
        </constructor-arg>
    </bean>

</beans>