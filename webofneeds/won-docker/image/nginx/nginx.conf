# This is the main nginx config file for the domain: matchat.org, www.matchat.org and node.matchat.org
# See at the bottom of this file that also "/etc/nginx/conf.d/*.conf" is included.
# We use this folder to add more nginx config file for other subdomains (e.g. uki.matchat.org and node.uki.matchat.org)
# NOTE: the "streams" for the subdomains however are directly added to this file, not included


user  nginx;
worker_processes  1;

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;

events {
    worker_connections  1024;
}

# jms broker config for matchat.org
# =====================================
stream {

    # pass tcp jms messages to matchat.org
    server {
        listen 61616;
        proxy_pass satvm01.researchstudio.at:61617;
    }

    # pass tcp jms messages to line.uki.or.at
    server {
        listen 61626;
        proxy_pass satvm06.researchstudio.at:61627;
    }
}

# https config
http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';
    access_log  /var/log/nginx/access.log main;

    sendfile           off;
    keepalive_timeout  65;


    # ==============================================
    # matchat.org owner config
    # ==============================================

    # redirect all http requests to https
    server {
        listen          80;
        server_name     www.matchat.org;
        root            /data;

        # configuration for letsencrypt certbot ssl challenge
        location /.well-known/acme-challenge {
            root    /usr/share/nginx/html;
        }

        location = /robots.txt {
            add_header Content-Type text/plain;
            allow all;
            return 200 "User-agent: *\nSitemap: https://matchat.org/owner/sitemap.xml";
        }

        location / {
            return  301 https://$server_name$request_uri;
        }
    }

    # pass https requests to owner instances
    server {
        ssl                 on;
        listen              443 ssl;
        root                /data;
        server_name         www.matchat.org;

        # certificate data
        ssl_certificate     /etc/letsencrypt/live/matchat.org/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/matchat.org/privkey.pem;

        location /piwik {
            return 302 /piwik/;
        }

        location /piwik/ {
            proxy_pass http://satvm01.researchstudio.at:8080/;
            proxy_redirect     off;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Host $host;
        }

        location /owner {
            proxy_pass https://satvm01.researchstudio.at:8082/owner;

            # Pass the csrf token (see https://de.wikipedia.org/wiki/Cross-Site-Request-Forgery)
            # Default in Spring Boot and required. Without it nginx suppresses the value
            proxy_pass_header X-XSRF-TOKEN;

            # Set origin to the real instance, otherwise a of Spring security check will fail
            # Same value as defined in proxy_pass
            proxy_set_header Origin "https://satvm01.researchstudio.at:8082/owner";

            # add for web socket compatibility
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
        }
        
        location = /robots.txt {
            add_header Content-Type text/plain;
            allow all;
            return 200 "User-agent: *\nSitemap: https://matchat.org/owner/sitemap.xml";
        }

        location / {
            # here we do a redirect to /owner uri prefix since we want the owner application to be the default
            # application on this server. We didn't figure out how to use proxy_cookie_path exactly to handle
            # sessions correctly when webapp is accessed in two ways: with and without /owner prefix => so redirect
            # seems to be the easiest solution for now
            return 301 https://$server_name/owner$request_uri;
        }
    }


    # ==============================================
    # matchat.org wonnode config
    # ==============================================

    # redirect all http requests to https
    server {
        listen          80;
        server_name     node.matchat.org;
        root            /data;

        # configuration for letsencrypt certbot ssl challenge
        location /.well-known/acme-challenge {
            root    /usr/share/nginx/html;
        }

        location / {
            return  301 https://$server_name$request_uri;
        }
    }

    # pass https requests to node instances
    server {
        ssl                 on;
        listen              443 ssl;
        root                /data;
        server_name         node.matchat.org;

        # request the client certificate but does not require it to be signed by a trusted CA certificate
        ssl_verify_client optional_no_ca;

        # add for web socket compatibility
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";

        # certificate data
        ssl_certificate     /etc/letsencrypt/live/matchat.org/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/matchat.org/privkey.pem;

        location /won {
            # set the client certificate in this header when the certificate was already validated by nginx
            proxy_set_header X-Client-Certificate $ssl_client_cert;
            proxy_pass https://satvm01.researchstudio.at:8443/won;

            # Pass the csrf token (see https://de.wikipedia.org/wiki/Cross-Site-Request-Forgery)
            # Default in Spring Boot and required. Without it nginx suppresses the value
            proxy_pass_header X-XSRF-TOKEN;

            # Set origin to the real instance, otherwise a of Spring security check will fail
            # Same value as defined in proxy_pass
            proxy_set_header Origin "https://satvm01.researchstudio.at:8443/won";

            # Set Host header so the wonnode can operate on the original uri for access control checks
            proxy_set_header   Host $host;
        }

        location / {
            return 301 https://$server_name/won$request_uri;
        }
    }

    include /etc/nginx/conf.d/*.conf;
}