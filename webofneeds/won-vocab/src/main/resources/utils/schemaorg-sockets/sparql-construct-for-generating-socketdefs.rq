#
# CONSTRUCT query that generates a won:SocketDefinition individual for each property in schema.org
# Checks for schema:inverseOf annotations. If such an annotation is found, the corresponding inverse SocketDefinition
# is added as the compatible one. If no inverse is found, a SocketDefinition is generated that uses the same property, but
# derives it in the inverse direction.
#  
# The query only picks up properties whose range includes subclasses of schema:Thing - so as to avoid datatype properties.

prefix won: <https://w3id.org/won/core#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix foaf: <http://xmlns.com/foaf/0.1/>
prefix schema: <http://schema.org/>
prefix wxs: <https://w3id.org/won/ext/schema#>
construct {
  ?socketDef a won:SocketDefinition;
               won:derivesAtomProperty ?prop ;
           rdfs:comment "Socket automatically generated from the schema.org vocabulary."@en ;
               won:compatibleSocketDefinition ?inverseSocketDef .
    ?inverseSocketDefToAdd a won:SocketDefinition;
         won:derivesInverseAtomProperty ?prop ;
           rdfs:comment "Socket automatically generated from the schema.org vocabulary."@en ;
               won:compatibleSocketDefinition ?socketDef .
    
}
where 
{ 
    {
      ?prop a rdf:Property .
      filter not exists {
          ?prop schema:inverseOf ?inverseProp
      }
      bind (concat(replace(str(?prop), "http://schema.org/", ""),"Inverse") as ?inversePropName)
      bind (false as ?inverseExists)
    } union {
      ?prop a rdf:Property .
      ?prop schema:inverseOf ?inverseProp
      bind (replace(str(?inverseProp), "http://schema.org/", "") as ?inversePropName)
      bind (true as ?inverseExists)
    }
    bind (replace(str(?prop), "http://schema.org/", "") as ?propName)
    bind (concat(ucase(substr(?propName,0,1)), substr(?propName,2)) as ?propNameUppercase)
    bind (IRI(concat("https://w3id.org/won/ext/schema#",?propNameUppercase,"Socket")) as ?socketDef)
    
    bind (concat(ucase(substr(?inversePropName,0,1)), substr(?inversePropName,2)) as ?inversePropNameUppercase)
    bind (IRI(concat("https://w3id.org/won/ext/schema#",?inversePropNameUppercase,"Socket")) as ?inverseSocketDef)
  bind (if (?inverseExists, ?unbound, ?inverseSocketDef) as ?inverseSocketDefToAdd)    
  filter exists {
    ?prop schema:rangeIncludes ?range .
    ?range rdfs:subClassOf* schema:Thing   
  }
}