<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright 2012  Research Studios Austria Forschungsges.m.b.H.
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~    http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-3.1.xsd">
    <!--
         Load properties but ignore unresolvable properties so that
         they are searched in other property configurers defined in the context
    -->
    <context:property-placeholder location="file:${WON_CONFIG_DIR}/owner.properties" ignore-unresolvable="true"/>


    <bean id="uriService" class="won.owner.service.impl.URIService">
        <property name="ownerProtocolOwnerServiceEndpointURI" value="${uri.owner.protocol.endpoint}" />
        <property name="defaultOwnerProtocolNeedServiceEndpointURI" value="${uri.need.protocol.endpoint.default}" />
        <property name="ownerProtocolOwnerURI" value="${uri.prefix.owner}"/>
    </bean>

    <!-- Model Mapper for RDF -->
    <bean id="needModelMapper" class="won.protocol.util.NeedModelMapper"/>
    <bean id="connectionModelMapper" class="won.protocol.util.ConnectionModelMapper"/>

    <bean id="executor" class="org.springframework.scheduling.concurrent.ConcurrentTaskExecutor" />

	<bean id="wonUserDetailService" class="won.owner.service.impl.WONUserDetailService" />

    <!-- private keys and their certificates for owner and needs,
     possibly certificates of other parties-->
    <!--bean id="clientKeyStoreService" class="won.cryptography.service.KeyStoreService" init-method="init">
        <constructor-arg type="java.lang.String" value="${keystore.location}" />
        <constructor-arg type="java.lang.String" value="${keystore.password}" />
        <property name="defaultAlias" value="${uri.prefix.owner}" />
    </bean>
    <bean id="trustStoreService" class="won.cryptography.service.TrustStoreService" init-method="init">
        <constructor-arg type="java.lang.String" value="${truststore.location}" />
        <constructor-arg type="java.lang.String" value="${truststore.password}" />
    </bean>
    <bean id="certificateService" class="won.cryptography.service.CertificateService">
    </bean-->

    <!--bean id="cryptoService" class="won.cryptography.service.CryptographyService">
        <constructor-arg ref="keyStoreService" />
    </bean-->

    <!--bean id="ownerCertificateOnStartupCreator"
          class="won.owner.service.impl.OwnerCertificateOnStartupCreator">
        <property name="keyStoreService" ref="clientKeyStoreService" />
    </bean-->

    <!-- processor for checking signatures -->
    <bean name="signatureChecker" class="won.protocol.message.processor.camel.WonMessageProcessorCamelAdapter">
        <constructor-arg>
            <bean class="won.protocol.message.processor.impl.SignatureCheckingWonMessageProcessor" />
        </constructor-arg>
    </bean>
    <!-- processor for signing messages -->
    <bean id="signatureAddingProcessor" class="won.protocol.message.processor.impl.SignatureAddingWonMessageProcessor">
        <property name="cryptographyService" ref="cryptographyService" />
    </bean>
    <bean name="signatureAdder" class="won.protocol.message.processor.camel.WonMessageProcessorCamelAdapter">
        <constructor-arg ref="signatureAddingProcessor" />
    </bean>
    <!-- processor for generating and adding keys for just created needs -->

    <bean name="needKeyGeneratorAndAdder" class="won.protocol.message.processor.impl.KeyForNewNeedAddingProcessor">
        <property name="cryptographyService" ref="cryptographyService" />

    </bean>

    <!-- server's key store at owner is not used in code, but used when tomcat connector is configured-->
    <!--bean id="serverKeyStoreService" class="won.cryptography.service.KeyStoreService" init-method="init">
        <constructor-arg type="java.lang.String" value="${tomcat.keystore}" />
        <constructor-arg type="java.lang.String" value="${tomcat.keystore.password}" />
        <property name="defaultAlias" value="${tomcat.keystore.alias}" />
    </bean-->


    <!--property name="serverKeyStoreService" ref="serverKeyStoreService" /-->
    <!--bean id="wonSecurityConfig" class="won.cryptography.service.WonTlsSecurityConfig">
        <property name="trustStoreService" ref="trustStoreService" />
        <property name="clientKeyStoreService" ref="clientKeyStoreService" />
    </bean-->




</beans>